𝗖𝗼𝗿𝗲 𝗝𝗮𝘃𝗮𝗦𝗰𝗿𝗶𝗽𝘁
 1. What is the difference between var, let, and const in JavaScript?
 answer - 
 In JavaScript, var, let, and const are three types of variable declarations. The main differenc
 e between them is the scope and re-declaration of the variables.
 var is used 
 to declare a variable, and it has function scope. This means that a variable declared with var
 can be accessed anywhere within the function where it is declared.
 let is used to declare a variable, and it has block scope. This means that a variable declared
 with let can only be accessed within the block where it is declared.
 const is used to declare a constant variable, and it has block scope. This means that a variabl
 e declared with const can only be accessed within the block where it is declared. The value of a
 const variable cannot be changed once it is declared.

 1.2. What is the purpose of the `this` keyword in JavaScript?
 answer -
 The `this` keyword in JavaScript refers to the current execution context of a function. It can b
 e used to access the properties and methods of the current object.

 1.3. What is the difference between == and === in JavaScript?
 answer -
 The `==` operator checks for equality in value, while the `===` operator checks for equality
 in both value and type. This means that `==` will return true if the values of th  
 e two operands are equal, regardless of their types, while `===` will return true only if
 the values and types of the two operands are equal.


 1.4. What is the purpose of the `bind` method in JavaScript?
 answer -
 The `bind` method in JavaScript is used to set the `this` keyword of a function to
 a specific value. It returns a new function that has its `this` keyword set to the specified
 value.

 2. What are closures in JavaScript, and how do they work?
 answer -
 Closures in JavaScript are functions that have access to their own scope, as well as the scope of
 their outer functions. They are created when a function is returned from another function, or
 when a function is passed as an argument to another function.


 3. What is the this keyword in JavaScript, and how does it behave in different contexts?
 answer -
 The `this` keyword in JavaScript refers to the current execution context of a function. It can b
 e used to access the properties and methods of the current object. The behavior of `this` can
 change depending on the context in which it is used. In a function call, `this` refers
 to the global object (usually the window object in a browser). In a method call, `this
 refers to the object that the method is called on. In a constructor call, `this` refers
 to the newly created object.


 4. What is a JavaScript promise, and how does it handle asynchronous code?
 answer -
 A JavaScript promise is an object that represents the eventual completion (or failure) of an
 asynchronous operation. It allows you to write asynchronous code that is easier to read and
 manage. A promise can be in one of three states: pending, fulfilled, or rejected.


 5. What is the event loop, and how does JavaScript handle asynchronous operations?
 answer -
 The event loop in JavaScript is a mechanism that allows the browser to handle multiple tasks
 asynchronously. It is a queue that holds tasks that need to be executed, and it runs these tasks
 in a specific order. The event loop is responsible for handling events, such as user input, network
 requests, and timer events. It also handles asynchronous operations, such as I/O operations and
 asynchronous function calls.

 6. What is hoisting in JavaScript, and how does it work?
 answer -
 Hoisting in JavaScript is a mechanism that allows variables and functions to be moved to the top of their
 scope. This means that variables and functions can be used before they are declared, as long as they
 are declared somewhere in the scope. However, only function declarations are hoisted, not function
 expressions.

 7. What are JavaScript data types, and how do you check the type of a variable?
 answer -
 JavaScript has several built-in data types, including number, string, boolean, object, array, null
 and undefined. You can check the type of a variable using the typeof operator.

 8. What is the difference between null and undefined in JavaScript?
 answer -
 Null and undefined are two distinct values in JavaScript. Null represents the intentional absence of any object value,
 while undefined represents an uninitialized variable or a property that has not been initialized.
 
 9. What is a callback function, and how is it used?
 answer -
 A callback function is a function that is passed as an argument to another function, and is executed
 after the outer function has completed its execution. Callback functions are commonly used in asynchronous
 operations, such as I/O operations and timer events.
 EXAMPLE- 
 Callback 
  function (err, data) {
    if (err) {
        console.error(err);
        } else {
            console.log(data);
            }
            }
 10. How do you manage errors in JavaScript?
 answer -
 to manage errors in JavaScriptwe use 
 try-catch block and 
 finally block
